{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.jsx","components/Section/Section.jsx","components/Filter/Filter.jsx","components/App.js","index.js"],"names":["ContactForm","props","handleChange","e","name","target","value","setState","handleSubmit","preventDefault","onSubmit","state","number","this","className","type","pattern","title","required","onChange","autoComplete","Component","ContactItem","onDelete","id","onClick","ContactsList","contacts","map","Section","children","Filter","filter","App","addContact","newContact","checkDoubleName","alert","contact","uuidv4","prevState","normalizedName","toLowerCase","some","deleteContact","contactId","getFilterContacts","normalizedFilter","includes","localStorage","getItem","parsedContacts","JSON","parse","console","log","prevProps","prevContacts","newContacts","setItem","stringify","sordList","valueFilter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d86576b4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./ContactForm.scss\";\n\nclass ContactForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: \"\", number: \"\" };\n  }\n\n  handleChange = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit} className=\"form-contacts\">\n        <label className=\"form-contacts__input\">\n          Name:\n          <input\n            className=\"form-contacts__text\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.handleChange}\n            value={name}\n            autoComplete=\"off\"\n          />\n        </label>\n        <label className=\"form-contacts__input\">\n          Number:\n          <input\n            className=\"form-contacts__text\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={this.handleChange}\n            value={number}\n            autoComplete=\"off\"\n          />\n        </label>\n        <button type=\"submit\" className=\"form-contacts__button\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import \"./ContactItem.scss\";\nimport PropTypes from \"prop-types\";\n\nconst ContactItem = ({ name, number, onDelete, id }) => {\n  return (\n    <li className=\"contacts-list__item\">\n      <span>\n        {name}: {number}\n      </span>\n      <input\n        className=\"contacts-list__button\"\n        type=\"button\"\n        value=\"delete\"\n        onClick={() => onDelete(id)}\n      />\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import ContactItem from \"../ContactItem\";\nimport \"./ContactsList.scss\";\n\nimport PropTypes from \"prop-types\";\n\nconst ContactsList = ({ contacts, onDelete }) => {\n  return (\n    <div>\n      <ul className=\"contacts-list\">\n        {contacts.map(({ id, name, number }) => (\n          <ContactItem\n            key={id}\n            name={name}\n            number={number}\n            onDelete={onDelete}\n            id={id}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import \"./Section.scss\";\n\nconst Section = ({ children }) => {\n  return <section className=\"section\">{children}</section>;\n};\n\nexport default Section;\n","import \"./Filter.scss\";\nimport PropTypes from \"prop-types\";\n\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <label className=\"filter-input\">\n      search:\n      <input\n        className=\"filter-input__text\"\n        type=\"text\"\n        value={filter}\n        name=\"filter\"\n        onChange={onChange}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  filter: PropTypes.string,\n};\n\nexport default Filter;\n","import React, { Component } from \"react\";\n\nimport ContactForm from \"./ContactForm\";\nimport ContactsList from \"./ContactsList\";\nimport Section from \"./Section\";\nimport Filter from \"./Filter\";\nimport \"./App.scss\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contacts: [],\n      filter: \"\",\n    };\n  }\n\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n\n    console.log(parsedContacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevContacts = prevState.contacts;\n    const newContacts = this.state.contacts;\n\n    if (newContacts !== prevContacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(newContacts));\n    }\n  }\n\n  addContact = (newContact) => {\n    if (this.checkDoubleName(newContact)) {\n      alert(`${newContact.name} уже есть в контактах.`);\n      return false;\n    }\n    const contact = {\n      id: uuidv4(),\n      ...newContact,\n    };\n\n    this.setState((prevState) => ({\n      contacts: [contact, ...prevState.contacts],\n    }));\n  };\n\n  checkDoubleName = (newContact) => {\n    const { name } = newContact;\n    const normalizedName = name.toLowerCase();\n    const { contacts } = this.state;\n    return contacts.some(({ name }) => name.toLowerCase() === normalizedName);\n  };\n\n  deleteContact = (contactId) => {\n    this.setState(({ contacts }) => ({\n      contacts: contacts.filter(({ id }) => id !== contactId),\n    }));\n  };\n\n  handleChange = (e) => {\n    const value = e.target.value;\n\n    this.setState({ filter: value });\n  };\n\n  getFilterContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const sordList = this.getFilterContacts();\n\n    return (\n      <Section>\n        <h1 className=\"caption\">Phonebook</h1>\n        <ContactForm onSubmit={this.addContact} />\n        <h2 className=\"title\">Contacts</h2>\n        <Filter valueFilter={filter} onChange={this.handleChange} />\n        <ContactsList contacts={sordList} onDelete={this.deleteContact} />\n      </Section>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}